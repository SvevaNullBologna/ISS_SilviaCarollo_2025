/* Generated by AN DISI Unibo */ 
package it.unibo.mapbuilder

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.java.*
import main.resources.map.*

class Mapbuilder ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "activate"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
		 
		
		var stepok      = 0
		var CurPlan    = ""
		var CurMove    = ""
		var Athome     = false 
		var StepInPlan = false
		
		var Step       = 340
		val mapper     = RobotMapper()
		val MapName    = "mapmentalfirst"
		return { //this:ActionBasciFsm
				state("activate") { //this:State
					action { //it:State
						forward("init", "init(false)" ,"robotservice" ) 
						delay(1000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("coverNextColumn") { //this:State
					action { //it:State
						CommUtils.outblue("$name | coverNextColumn")
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t012",targetState="backtop",cond=whenReply("stepfailed"))
				}	 
				state("coverColumn") { //this:State
					action { //it:State
						 stepok = stepok + 1
								   mapper.doMove("w")
						CommUtils.outblack("coverColumn stepok=$stepok")
						delay(300) 
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="coverColumn",cond=whenReply("stepdone"))
					transition(edgeName="t014",targetState="backtop",cond=whenReply("stepfailed"))
				}	 
				state("backtop") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						  mapper.updateMapObstacleOnCurrentDirection()  
						CommUtils.outblack("backtop")
						forward("move", "move(l)" ,"robotservice" ) 
						 mapper.doMove("l")  
						delay(300) 
						forward("move", "move(l)" ,"robotservice" ) 
						 mapper.doMove("l")  
						delay(300) 
						 mapper.showCurrentRobotState()  
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="gototop",cond=whenReply("stepdone"))
					transition(edgeName="t016",targetState="turnAndStep",cond=whenReply("stepfailed"))
				}	 
				state("gototop") { //this:State
					action { //it:State
						  
								   mapper.doMove("w")
						 		   stepok = stepok - 1 
						CommUtils.outblack("gototop stepok=$stepok")
						delay(300) 
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="gototop",cond=whenReplyGuarded("stepdone",{ stepok > 0  
					}))
					transition(edgeName="t018",targetState="turnAndStep",cond=whenReplyGuarded("stepdone",{ stepok == 0  
					}))
					transition(edgeName="t019",targetState="turnAndStep",cond=whenReply("stepfailed"))
				}	 
				state("turnAndStep") { //this:State
					action { //it:State
						forward("move", "move(r)" ,"robotservice" ) 
						 mapper.doMove("r")  
						delay(300) 
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="posForNextColumn",cond=whenReply("stepdone"))
					transition(edgeName="t021",targetState="endOfWork",cond=whenReply("stepfailed"))
				}	 
				state("posForNextColumn") { //this:State
					action { //it:State
						 mapper.doMove("w")  
						forward("move", "move(r)" ,"robotservice" ) 
						 mapper.doMove("r")  
						CommUtils.outblack("posForNextColumn stepok=$stepok")
						 mapper.showCurrentRobotState()  
						delay(500) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="coverNextColumn", cond=doswitch() )
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						CommUtils.outblack("$name | endOfWork")
						  mapper.showCurrentRobotState()	 
						 mapper.saveRoomMap( MapName  )    
						CommUtils.outblack("$name | endOfWork")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="turn180", cond=doswitch() )
				}	 
				state("turn180") { //this:State
					action { //it:State
						CommUtils.outblack("$name | turn r")
						forward("move", "move(r)" ,"robotservice" ) 
						 mapper.doMove("r")  
						  mapper.showCurrentRobotState()	 
						delay(300) 
						CommUtils.outblack("$name | turn r")
						forward("move", "move(l)" ,"robotservice" ) 
						 mapper.doMove("r")  
						  mapper.showCurrentRobotState()	 
						delay(300) 
						CommUtils.outblack("$name | w")
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t022",targetState="backToHome",cond=whenReply("stepdone"))
					transition(edgeName="t023",targetState="strange",cond=whenReply("stepfailed"))
				}	 
				state("backToHome") { //this:State
					action { //it:State
						 mapper.doMove("w")    
						delay(200) 
						request("step", "step($Step)" ,"robotservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t024",targetState="backToHome",cond=whenReply("stepdone"))
					transition(edgeName="t025",targetState="turnAndStop",cond=whenReply("stepfailed"))
				}	 
				state("turnAndStop") { //this:State
					action { //it:State
						forward("move", "move(l)" ,"robotservice" ) 
						 mapper.doMove("l")  
						 mapper.showCurrentRobotState()  
						 mapper.saveRoomMap( "map25new"  )    
						 mapper.nextDirty( )  
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("strange") { //this:State
					action { //it:State
						 mapper.showCurrentRobotState()  
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
