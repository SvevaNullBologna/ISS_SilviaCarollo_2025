/* Generated by AN DISI Unibo */ 
package it.unibo.sonardevice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonardevice ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				var process: Process? = null	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						CommUtils.outmagenta("sonardevice ready")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="turnSonarOn", cond=doswitch() )
				}	 
				state("turnSonarOn") { //this:State
					action { //it:State
						CommUtils.outmagenta("sonar active: activating sonar...")
						 
						        	process = Runtime.getRuntime().exec("python sonarStart.py")
						CommUtils.outblack("sonardevice on")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						CommUtils.outmagenta("sonardevice waits...")
						
						    		val reader = java.io.BufferedReader(java.io.InputStreamReader(process.inputStream))
						        	val distance = reader.readLine().toDouble()
						        	emit sonardata : distance(distance) 	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="turnSonarOn",cond=whenDispatch("sonarstart"))
					transition(edgeName="t01",targetState="turnSonarOff",cond=whenDispatch("sonarstop"))
				}	 
				state("turnSonarOff") { //this:State
					action { //it:State
						CommUtils.outmagenta("sonardevice inactive: stopping sonar...")
						 Runtime.getRuntime().exec("python sonarStop.py")  
						CommUtils.outmagenta("sonardevice off")
						delay(2000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
			}
		}
} 
